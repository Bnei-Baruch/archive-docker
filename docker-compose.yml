version: "3.7"

x-logging:
  &default-logging
  options:
    max-size: '12m'
    max-file: '5'
  driver: json-file

services:
  nginx:
    image: nginx:latest
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
      - nginx_data:/data
      - kmedia_build:/sites/archive-frontend:ro
      - admin_ui_build:/sites/admin:ro
      - assets:/sites/assets:ro
    networks:
      - frontend
    ports:
      - 80:80
      - 443:443
    depends_on:
      - archive_backend
      - mdb_links
      - assets_api
      - kmedia_mdb
      - imaginary
  postgres_mdb:
    build: https://github.com/onderaycicek/postgres.git#master:9.6
    volumes:
      - pg_data:/var/lib/postgresql/data/pg_data
      - backup:/backup
    networks:
      - backend
    command: -c 'hot_standby=on'
    environment:
      POSTGRES_PASSWORD: ${MDB_POSTGRES_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pg_data
      PRIMARY_HOST: ${MDB_PRIMARY_HOST}
      PRIMARY_USER: ${MDB_PRIMARY_USER}
      PRIMARY_PASSWORD: ${MDB_PRIMARY_PASSWORD}
      PRIMARY_SLOTNAME: dockerslot
  elastic:
    build: ./elastic
    environment:
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - path.repo=/backup/elastic
      - ES_JAVA_OPTS=${ELASITC_JAVA_OPTS}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - elastic_data:/usr/share/elasticsearch/data
      - backup:/backup
    networks:
      - backend
    ports:
      - 9200:9200
  archive_backend:
    build: ~/go/src/github.com/Bnei-Baruch/archive-backend
    volumes:
      - ./archive_backend/config.toml:/app/config.toml
      - assets:/assets
    networks:
      - frontend
      - backend
    logging: *default-logging
    depends_on:
      - postgres_mdb
      - elastic
    environment:
      MDB_URL: postgres://${MDB_USER}:${MDB_PASSWORD}@postgres_mdb/mdb?sslmode=disable
      SERVER_ROLLBAR_TOKEN: ${ROLLBAR_TOKEN}
    command: ["/wait-for", "postgres_mdb:5432", "--", "/wait-for", "elastic:9200", "--timeout=60", "--", "./archive-backend", "server"]
  events:
    build: ~/go/src/github.com/Bnei-Baruch/archive-backend
    volumes:
      - ./archive_backend/config.toml:/app/config.toml
      - assets:/assets
    networks:
      - frontend
      - backend
    logging: *default-logging
    depends_on:
      - postgres_mdb
      - elastic
    environment:
      MDB_URL: postgres://${MDB_USER}:${MDB_PASSWORD}@postgres_mdb/mdb?sslmode=disable
      SERVER_ROLLBAR_TOKEN: ${ROLLBAR_TOKEN}
    command: ["/wait-for", "postgres_mdb:5432", "--", "/wait-for", "elastic:9200", "--timeout=60", "--", "./archive-backend", "events"]
  mdb_links:
    build: ~/go/src/github.com/Bnei-Baruch/mdb-links
    volumes:
      - ./mdb-links/config.toml:/app/config.toml
    networks:
      - frontend
      - backend
    logging: *default-logging
    depends_on:
      - postgres_mdb
    environment:
      MDB_URL: postgres://${MDB_USER}:${MDB_PASSWORD}@postgres_mdb/mdb?sslmode=disable
      SERVER_ROLLBAR_TOKEN: ${ROLLBAR_TOKEN}
    command: ["/wait-for", "postgres_mdb:5432", "--", "./mdb-links", "server"]
  assets_api:
    build: ~/projects/archive-unzip
    volumes:
      - assets:/assets
    networks:
      - frontend
      - backend
    logging: *default-logging
    depends_on:
      - postgres_mdb
    environment:
      BASE_DIR: /assets/generated
      MDB_URL: postgres://${MDB_USER}:${MDB_PASSWORD}@postgres_mdb/mdb?sslmode=disable
      MDB_POOL_SIZE: 8
    command: ["/wait-for", "postgres_mdb:5432", "--", "uwsgi", "--show-config"]
  kmedia_mdb:
    build: ~/projects/kmedia-mdb
    volumes:
      - kmedia_build:/app/build:ro
    networks:
      - frontend
    ports:
      - "3001-3003:3001"
    logging: *default-logging
  admin_ui:
    build: ~/projects/mdb-admin
    volumes:
      - admin_ui_build:/app:ro
  imaginary:
    image: h2non/imaginary:1.1.0
    networks:
      - frontend
    logging: *default-logging
    environment:
      PORT: 8082
    command: -cors -concurrency 20 -enable-url-source nginx,kabbalahmedia.info,*.kabbalahmedia.info

networks:
  frontend:
  backend:

volumes:
  nginx_data:
  pg_data:
  elastic_data:
  assets:
  kmedia_build:
  admin_ui_build:
  backup:

